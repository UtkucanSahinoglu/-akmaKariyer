// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ÇakmaKariyer.Migrations
{
    [DbContext(typeof(CakmaKariyerContext))]
    partial class CakmaKariyerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.1.22076.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Visibility")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Account_Role", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("AccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Account_Role");
                });

            modelBuilder.Entity("AccountEmployerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OpenAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("WorkplaceInfo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("SectorId");

                    b.ToTable("AccountEmployerDetails");
                });

            modelBuilder.Entity("AccountEmployerDetail_JobAdvertisement", b =>
                {
                    b.Property<int>("AccountEmployerDetailId")
                        .HasColumnType("int");

                    b.Property<int>("JobAdvertisementId")
                        .HasColumnType("int");

                    b.HasKey("AccountEmployerDetailId", "JobAdvertisementId");

                    b.HasIndex("JobAdvertisementId");

                    b.ToTable("AccountEmployerDetail_JobAdvertisement");
                });

            modelBuilder.Entity("AccountStudentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abilities")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("EducationStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WorkExperince")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountStudentDetails");
                });

            modelBuilder.Entity("Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountEmployerDetailId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OpenAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountEmployerDetailId");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Department_Sector", b =>
                {
                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("SectorId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Department_Sectors");
                });

            modelBuilder.Entity("District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("JobAdvertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("JobAdvertisementDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NumberOfApplications")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("SectorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("WorkTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobAdvertisementDetailId");

                    b.HasIndex("PositionId");

                    b.HasIndex("SectorId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("JobAdvertisements");
                });

            modelBuilder.Entity("JobAdvertisementDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("EducationStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ForeignLanguage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GeneralProperties")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("JobDefinition")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("JobRequirements")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OpenAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WorkExperince")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WorkplaceInfo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("jobAdvertisementDetails");
                });

            modelBuilder.Entity("Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Position_Department", b =>
                {
                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("PositionId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Position_Departments");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Visibility")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("WorkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("JobAdvertisementId")
                        .HasColumnType("int");

                    b.Property<string>("WorkTime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("WorkType");
                });

            modelBuilder.Entity("Account_Role", b =>
                {
                    b.HasOne("Account", "Account")
                        .WithMany("Account_Roles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Role", "Role")
                        .WithMany("Account_Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AccountEmployerDetail", b =>
                {
                    b.HasOne("Account", "Accounts")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sector", "Sectors")
                        .WithMany("AccountEmployerDetails")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accounts");

                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("AccountEmployerDetail_JobAdvertisement", b =>
                {
                    b.HasOne("AccountEmployerDetail", "AccountEmployerDetail")
                        .WithMany("AccountEmployerDetail_JobAdvertisements")
                        .HasForeignKey("AccountEmployerDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobAdvertisement", "jobAdvertisement")
                        .WithMany("AccountEmployerDetail_JobAdvertisements")
                        .HasForeignKey("JobAdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountEmployerDetail");

                    b.Navigation("jobAdvertisement");
                });

            modelBuilder.Entity("AccountStudentDetail", b =>
                {
                    b.HasOne("Account", "Accounts")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Address", b =>
                {
                    b.HasOne("AccountEmployerDetail", "AccountEmployerDetails")
                        .WithMany("Addresses")
                        .HasForeignKey("AccountEmployerDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("District", "District")
                        .WithMany("Addresses")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountEmployerDetails");

                    b.Navigation("City");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Department_Sector", b =>
                {
                    b.HasOne("Department", "department")
                        .WithMany("Department_Sectors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sector", "sector")
                        .WithMany("Department_Sectors")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");

                    b.Navigation("sector");
                });

            modelBuilder.Entity("District", b =>
                {
                    b.HasOne("City", "City")
                        .WithMany("District")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("JobAdvertisement", b =>
                {
                    b.HasOne("Department", "Departments")
                        .WithMany("JobAdvertisements")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobAdvertisementDetail", "JobAdvertisementDetails")
                        .WithMany("JobAdvertisements")
                        .HasForeignKey("JobAdvertisementDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Position", "Positions")
                        .WithMany("JobAdvertisements")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sector", "Sectors")
                        .WithMany("JobAdvertisements")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkType", "workType")
                        .WithMany("JobAdvertisements")
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("JobAdvertisementDetails");

                    b.Navigation("Positions");

                    b.Navigation("Sectors");

                    b.Navigation("workType");
                });

            modelBuilder.Entity("JobAdvertisementDetail", b =>
                {
                    b.HasOne("Address", "Addresses")
                        .WithMany("JobAdvertisementDetails")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Position_Department", b =>
                {
                    b.HasOne("Department", "department")
                        .WithMany("Position_Departments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Position", "position")
                        .WithMany("Position_Departments")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");

                    b.Navigation("position");
                });

            modelBuilder.Entity("Account", b =>
                {
                    b.Navigation("Account_Roles");
                });

            modelBuilder.Entity("AccountEmployerDetail", b =>
                {
                    b.Navigation("AccountEmployerDetail_JobAdvertisements");

                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Address", b =>
                {
                    b.Navigation("JobAdvertisementDetails");
                });

            modelBuilder.Entity("City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Department", b =>
                {
                    b.Navigation("Department_Sectors");

                    b.Navigation("JobAdvertisements");

                    b.Navigation("Position_Departments");
                });

            modelBuilder.Entity("District", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("JobAdvertisement", b =>
                {
                    b.Navigation("AccountEmployerDetail_JobAdvertisements");
                });

            modelBuilder.Entity("JobAdvertisementDetail", b =>
                {
                    b.Navigation("JobAdvertisements");
                });

            modelBuilder.Entity("Position", b =>
                {
                    b.Navigation("JobAdvertisements");

                    b.Navigation("Position_Departments");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Navigation("Account_Roles");
                });

            modelBuilder.Entity("Sector", b =>
                {
                    b.Navigation("AccountEmployerDetails");

                    b.Navigation("Department_Sectors");

                    b.Navigation("JobAdvertisements");
                });

            modelBuilder.Entity("WorkType", b =>
                {
                    b.Navigation("JobAdvertisements");
                });
#pragma warning restore 612, 618
        }
    }
}
